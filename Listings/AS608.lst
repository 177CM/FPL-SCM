C51 COMPILER V9.54   AS608                                                                 06/16/2022 15:36:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE AS608
OBJECT MODULE PLACED IN .\Objects\AS608.obj
COMPILER INVOKED BY: D:\C51\C51\BIN\C51.EXE AS608.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\AS608.l
                    -st) TABS(2) OBJECT(.\Objects\AS608.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "LCD1602.h"
   3          #include "MatrixKey.h"
   4          #include "Buzzer.h"
   5          #include "UART.h"
   6          #include "Delay.h"
   7          #include "Servo.h"
   8          
   9          
  10          unsigned char KeyNum_FP;                            //矩阵按键编号
  11          unsigned char ConnectFlag=1;                        //未使用到的标志性变量
  12          unsigned char Unlocked_FPM=0;                       //指纹模块开锁标志变量
  13          
  14          
  15          //as608通讯协议定义
  16          volatile unsigned char FPM10A_RECEICE_BUFFER[32];
  17          int finger_id = 0;
  18          //口令验证
  19          code unsigned char FPM10A_Get_Device[10] ={0x01,0x00,0x07,0x13,0x00,0x00,0x00,0x00,0x00,0x1b};
  20          //协议包头
  21          code unsigned char FPM10A_Pack_Head[6] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF};  
  22          //获得指纹图像
  23          code unsigned char FPM10A_Get_Img[6] = {0x01,0x00,0x03,0x01,0x00,0x05};    
  24          //获得模版总数
  25          code unsigned char FPM10A_Get_Templete_Count[6] ={0x01,0x00,0x03,0x1D,0x00,0x21 }; 
  26          //搜索指纹搜索范围0 - 999,使用BUFFER1中的特征码搜索
  27          code unsigned char FPM10A_Search_0_9[11]={0x01,0x00,0x08,0x04,0x01,0x00,0x00,0x00,0x13,0x00,0x21}; 
  28          //搜索0-9号指纹
  29          code unsigned char FPM10A_Search[11]={0x01,0x00,0x08,0x04,0x01,0x00,0x00,0x03,0xE7,0x00,0xF8}; 
  30          //将图像放入到BUFFER1
  31          code unsigned char FPM10A_Img_To_Buffer1[7]={0x01,0x00,0x04,0x02,0x01,0x00,0x08}; 
  32          //将图像放入到BUFFER2
  33          code unsigned char FPM10A_Img_To_Buffer2[7]={0x01,0x00,0x04,0x02,0x02,0x00,0x09}; 
  34          //将BUFFER1跟BUFFER2合成特征模版
  35          code unsigned char FPM10A_Reg_Model[6]={0x01,0x00,0x03,0x05,0x00,0x09}; 
  36          //删除指纹模块里所有的模版
  37          code unsigned char FPM10A_Delete_All_Model[6]={0x01,0x00,0x03,0x0D,0x00,0x11};
  38          //将BUFFER1中的特征码存放到指定的位置
  39          volatile unsigned char  FPM10A_Save_Finger[9]={0x01,0x00,0x06,0x06,0x01,0x00,0x0B,0x00,0x19};
  40          //volatile:系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据
  41          
  42          /*------------------ FINGERPRINT命令字 --------------------------*/
  43           //发送包头
  44          void FPM10A_Cmd_Send_Pack_Head(void){
  45   1        int i;  
  46   1        for(i=0;i<6;i++){                                   //包头 
  47   2           Uart_Send_Byte(FPM10A_Pack_Head[i]);   
  48   2          }   
  49   1      }
  50          //发送指令
  51          void FPM10A_Cmd_Check(void){
  52   1        int i=0;
  53   1        FPM10A_Cmd_Send_Pack_Head();                        //发送通信协议包头
  54   1        for(i=0;i<10;i++){    
C51 COMPILER V9.54   AS608                                                                 06/16/2022 15:36:50 PAGE 2   

  55   2          Uart_Send_Byte(FPM10A_Get_Device[i]);
  56   2          }
  57   1      }
  58          //接收反馈数据缓冲
  59          void FPM10A_Receive_Data(unsigned char ucLength){
  60   1        unsigned char i;
  61   1        for (i=0;i<ucLength;i++)
  62   1           FPM10A_RECEICE_BUFFER[i] = Uart_Receive_Byte();
  63   1      }
  64          //FINGERPRINT_获得指纹图像命令
  65          void FPM10A_Cmd_Get_Img(void){
  66   1          unsigned char i;
  67   1          FPM10A_Cmd_Send_Pack_Head();                      //发送通信协议包头
  68   1          for(i=0;i<6;i++){                                 //发送命令 0x1d
  69   2          Uart_Send_Byte(FPM10A_Get_Img[i]);
  70   2        }
  71   1      }
  72          //讲图像转换成特征码存放在Buffer1中
  73          void FINGERPRINT_Cmd_Img_To_Buffer1(void){
  74   1        unsigned char i;
  75   1        FPM10A_Cmd_Send_Pack_Head();                        //发送通信协议包头      
  76   1          for(i=0;i<7;i++){                                 //发送命令 将图像转换成 特征码 存放在 CHAR_buffer1     
  77   2          Uart_Send_Byte(FPM10A_Img_To_Buffer1[i]);
  78   2        }
  79   1      }
  80          //将图像转换成特征码存放在Buffer2中
  81          void FINGERPRINT_Cmd_Img_To_Buffer2(void){
  82   1           unsigned char i;
  83   1           for(i=0;i<6;i++){                                //发送包头  
  84   2          Uart_Send_Byte(FPM10A_Pack_Head[i]);   
  85   2           }
  86   1           for(i=0;i<7;i++){                                //发送命令 将图像转换成 特征码 存放在 CHAR_buffer1     
  87   2          Uart_Send_Byte(FPM10A_Img_To_Buffer2[i]);
  88   2            }
  89   1      }
  90          //搜索全部用户999枚
  91          void FPM10A_Cmd_Search_Finger(void){
  92   1        unsigned char i;          
  93   1        FPM10A_Cmd_Send_Pack_Head();                        //发送通信协议包头
  94   1        for(i=0;i<11;i++){         
  95   2          Uart_Send_Byte(FPM10A_Search[i]);   
  96   2        }
  97   1      }
  98          void FPM10A_Cmd_Reg_Model(void){
  99   1        unsigned char i;          
 100   1        FPM10A_Cmd_Send_Pack_Head();                        //发送通信协议包头
 101   1        for(i=0;i<6;i++){          
 102   2          Uart_Send_Byte(FPM10A_Reg_Model[i]);   
 103   2        }
 104   1      }
 105          //删除指纹模块里的所有指纹模版
 106          void FINGERPRINT_Cmd_Delete_All_Model(void){
 107   1        unsigned char i;    
 108   1          for(i=0;i<6;i++){                                 //包头
 109   2          Uart_Send_Byte(FPM10A_Pack_Head[i]); 
 110   2        }       
 111   1          for(i=0;i<6;i++){                                 //命令合并指纹模版  
 112   2          Uart_Send_Byte(FPM10A_Delete_All_Model[i]);   
 113   2        } 
 114   1      }
 115          //保存指纹
 116          void FPM10A_Cmd_Save_Finger( unsigned int storeID ){
C51 COMPILER V9.54   AS608                                                                 06/16/2022 15:36:50 PAGE 3   

 117   1        unsigned long temp = 0;
 118   1        unsigned char i;
 119   1        FPM10A_Save_Finger[5] =(storeID&0xFF00)>>8;
 120   1        FPM10A_Save_Finger[6] = (storeID&0x00FF);
 121   1        for(i=0;i<7;i++){
 122   2          temp = temp + FPM10A_Save_Finger[i];              //计算校验和       
 123   2        }   
 124   1        FPM10A_Save_Finger[7]=(temp & 0x00FF00) >> 8;       //存放校验数据
 125   1        FPM10A_Save_Finger[8]= temp & 0x0000FF;      
 126   1        FPM10A_Cmd_Send_Pack_Head();                        //发送通信协议包头  
 127   1        for(i=0;i<9;i++){
 128   2          Uart_Send_Byte(FPM10A_Save_Finger[i]);            //发送命令 将图像转换成 特征码 存放在 CHAR_buffer1
 129   2        }
 130   1      }
 131          
 132          //添加指纹
 133          void FPM10A_Add_Fingerprint(){
 134   1        LCD_Init();
 135   1        LCD_ShowString(1,0,"Finger ID:");
 136   1        LCD_ShowString(2,0,"S9:+S10:_S12:OK");
 137   1        LCD_ShowNum(1,14,finger_id,3);
 138   1        while(1)
 139   1        {
 140   2          KeyNum_FP=MatrixKey();
 141   2            if(KeyNum_FP==9)                                //指纹id增加
 142   2            {
 143   3              Buzzer_Time(100);
 144   3              finger_id++;
 145   3              finger_id%=300;
 146   3              LCD_ShowNum(1,14,finger_id,3);
 147   3              }
 148   2            if(KeyNum_FP==10)                               //指纹id减少
 149   2            {
 150   3              Buzzer_Time(100);
 151   3              finger_id--;
 152   3              if(finger_id<0)
 153   3              {
 154   4                finger_id=299;                              //限制0-299
 155   4              }
 156   3              LCD_ShowNum(1,14,finger_id,3);
 157   3            }
 158   2            if(KeyNum_FP==12)
 159   2            {
 160   3              Buzzer_Time(100);
 161   3              LCD_Init();
 162   3              LCD_ShowString(1,0,"PleasePutFinger1");
 163   3              FPM10A_Cmd_Get_Img();                         //获得指纹图像
 164   3              FPM10A_Receive_Data(12);                      //判断接收到的确认码,等于0指纹获取成功
 165   3              if(FPM10A_RECEICE_BUFFER[9]==0)
 166   3              {
 167   4                Delay(100);
 168   4                FINGERPRINT_Cmd_Img_To_Buffer1();
 169   4                FPM10A_Receive_Data(12);
 170   4                LCD_Init();
 171   4                LCD_ShowString(1,0,"SuccessfulEntry1");
 172   4                Buzzer_Time(100);                           //蜂鸣器响一次
 173   4                Delay(100);
 174   4                LCD_ShowString(1,0,"PleasePutFinger2");
 175   4                FPM10A_Cmd_Get_Img();                       //获得指纹图像
 176   4                FPM10A_Receive_Data(12);                    //判断接收到的确认码,等于0指纹获取成功
 177   4              }  
 178   3              if(FPM10A_RECEICE_BUFFER[9]==0)
C51 COMPILER V9.54   AS608                                                                 06/16/2022 15:36:50 PAGE 4   

 179   3              {
 180   4                Delay(200);
 181   4                LCD_Init();
 182   4                LCD_ShowString(1,0,"SuccessfulEntry2");
 183   4                LCD_ShowString(2,0,"    ID is");
 184   4                LCD_ShowNum(2,11,finger_id,3);
 185   4                FINGERPRINT_Cmd_Img_To_Buffer2();
 186   4                FPM10A_Receive_Data(12);
 187   4                FPM10A_Cmd_Reg_Model();                     //转换成特征码
 188   4                FPM10A_Receive_Data(12); 
 189   4                FPM10A_Cmd_Save_Finger(finger_id);                             
 190   4                FPM10A_Receive_Data(12);
 191   4                Buzzer_Time(100);                           //蜂鸣器响一次
 192   4                Delay(1000);
 193   4                finger_id+=1;
 194   4              }
 195   3            }
 196   2            if(KeyNum_FP==14)
 197   2            {
 198   3              LCD_ShowString(1,0,"   Add  finger  ");
 199   3              LCD_ShowString(2,0,"    ID is");
 200   3              LCD_ShowNum(2,11,finger_id,3);
 201   3            }
 202   2            if(KeyNum_FP==16){break;}
 203   2        }
 204   1      }
 205          
 206          
 207          //搜索指纹
 208          void FPM10A_Find_Fingerprint()
 209          {
 210   1        unsigned int find_fingerid = 0;
 211   1        unsigned char id_show[]={0,0,0};
 212   1        LCD_Init();
 213   1        LCD_ShowString(1,0," Finger Please ");
 214   1        LCD_ShowString(2,0,"S13:OK  S16:Esc");
 215   1        while(1)
 216   1        {
 217   2          KeyNum_FP=MatrixKey();                              //获得键值
 218   2          switch(KeyNum_FP)
 219   2          {
 220   3            case 13:
 221   3            {
 222   4              Buzzer_Time(100);
 223   4              FPM10A_Cmd_Get_Img();                           //获得指纹图像
 224   4              FPM10A_Cmd_Get_Img();                           //获得指纹图像
 225   4              FPM10A_Receive_Data(12);                        //判断接收到的确认码,等于0指纹获取成功
 226   4              if(FPM10A_RECEICE_BUFFER[9]==0)
 227   4                {
 228   5                    Delay(100);
 229   5                    FINGERPRINT_Cmd_Img_To_Buffer1();
 230   5                    FPM10A_Receive_Data(12);
 231   5                    FPM10A_Cmd_Search_Finger();
 232   5                    FPM10A_Receive_Data(16);
 233   5                    if(FPM10A_RECEICE_BUFFER[9]==0){          //搜索到
 234   6                      LCD_Init();
 235   6                      LCD_ShowString(1,0," Search success ");
 236   6                      LCD_ShowString(2,0,"ID:");
 237   6                      Buzzer_Time(100);                       //蜂鸣器响一次
 238   6                      find_fingerid = FPM10A_RECEICE_BUFFER[10]*256 + FPM10A_RECEICE_BUFFER[11];
 239   6                      LCD_ShowNum(2,4,find_fingerid,3);
 240   6                      LCD_ShowString(2,10,"S16:Esc");
C51 COMPILER V9.54   AS608                                                                 06/16/2022 15:36:50 PAGE 5   

 241   6                      Delay(1000);
 242   6                      if(Unlocked_FPM==0)
 243   6                      {
 244   7                        Unlock();                             //解锁操作
 245   7                        Unlocked_FPM=1;
 246   7                      }
 247   6                    }
 248   5                    else{
 249   6                      LCD_Init();
 250   6                      LCD_ShowString(1,0," Search  failed ");
 251   6                      LCD_ShowString(2,10,"S16:ESC");
 252   6                      Buzzer_Time(100);                       //蜂鸣器响一次}
 253   6                    }
 254   5                }
 255   4                break;
 256   4            }
 257   3            case 16:
 258   3            {
 259   4              Unlocked_FPM=0;
 260   4              Buzzer_Time(100);
 261   4              return;
 262   4            }
 263   3          }
 264   2        }
 265   1      }
 266          
 267          
 268          //删除所有存贮的指纹库
 269          void FPM10A_Delete_All_Fingerprint()
 270          {
 271   1        LCD_Init();
 272   1        LCD_ShowString(1,0,"   Empty All?   ");
 273   1        LCD_ShowString(2,0,"S15:YES  S16:NO");
 274   1        while(1)
 275   1        {
 276   2          KeyNum_FP=MatrixKey();                              //获取键值
 277   2            if(KeyNum_FP==15)
 278   2              {
 279   3                Delay(1000);
 280   3                KeyNum_FP=0;
 281   3                KeyNum_FP=MatrixKey();                        //获取键值
 282   3                if(KeyNum_FP==15)
 283   3                  {
 284   4                    LCD_ShowString(1,0,"   emptying     ");             LCD_Init();
 285   4      
 286   4                    FINGERPRINT_Cmd_Delete_All_Model();
 287   4                    FPM10A_Receive_Data(12);
 288   4                    LCD_Init();
 289   4                    LCD_ShowString(1,0,"   All empty    ");
 290   4                    Delay(300);
 291   4                    Buzzer_Time(100);                         //蜂鸣器响一次}
 292   4                }
 293   3              }
 294   2            if(KeyNum_FP==16)
 295   2            {
 296   3              break;
 297   3            }
 298   2        }
 299   1      }
 300          
 301          
 302          
C51 COMPILER V9.54   AS608                                                                 06/16/2022 15:36:50 PAGE 6   

 303          //设备检测
 304          void Device_Check(void){
 305   1        unsigned char i=0;
 306   1        FPM10A_RECEICE_BUFFER[9]=1;                           //串口数组第九位可判断是否通信正常
 307   1          LCD_ShowString(2,0,"Loading");
 308   1          for(i=0;i<8;i++)
 309   1          {
 310   2            LCD_ShowString(2,i+9,"*");
 311   2            Delay(50);
 312   2          }
 313   1          LCD_ShowString(2,0,"Docking  failure");
 314   1          FPM10A_Cmd_Check();                                 //单片机向指纹模块发送校对命令
 315   1          FPM10A_Receive_Data(12);                            //将串口接收到的数据转存
 316   1        if(FPM10A_RECEICE_BUFFER[9] == 0)
 317   1        {
 318   2          LCD_ShowString(2,0,"Docking  success");
 319   2          ConnectFlag=0;                                      //正确链接的标志变量
 320   2        }
 321   1      }
 322          //指纹模式初始化
 323          void F_Model_Init(){
 324   1        {
 325   2          LCD_Init();
 326   2          Uart_Init();                                        //初始化串口
 327   2          LCD_ShowString(1,0,"Fingerprint Test");
 328   2          Delay(500);                                         //延时500MS，等待指纹模块复位
 329   2          Device_Check();                                     //校对指纹模块是否接入正确，液晶做出相应的提示
 330   2          Delay(1000);                                        //对接成功界面停留一定时间
 331   2        }
 332   1        LCD_ShowString(1,0,"S13:Fin  S14:Add");
 333   1        LCD_ShowString(2,0,"S15:Del  S16:ESC");
 334   1        
 335   1      }
 336          
 337          
 338          
 339          
 340          
 341          
 342          
 343          
 344          
 345          
 346          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1373    ----
   CONSTANT SIZE    =    449    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
